//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""TacticalCombat"",
            ""id"": ""f08e46e4-04c8-414c-a00e-2482dfa41636"",
            ""actions"": [
                {
                    ""name"": ""EndTurn"",
                    ""type"": ""Button"",
                    ""id"": ""a4118021-28f9-4ee3-ae4e-2b1655fa707b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnitMove"",
                    ""type"": ""Button"",
                    ""id"": ""0f8b89ed-e9dd-492a-b702-d0b4bd158803"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickPosition"",
                    ""type"": ""Button"",
                    ""id"": ""1a2d181a-eedd-4ae8-b126-038d0612cd36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""32ca493f-7827-4d19-bbc4-7a7a5439fb00"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""04d3ad7a-02ad-4a7a-a931-1974c70173a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""367e6757-d0bc-4fc2-bdb8-802f3ff5073e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22e82279-5c9a-4972-93d2-eff8aaf72068"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e326f03-2c90-463b-801e-1b1f5417e0aa"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnitMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbf6e579-5f85-4e65-b011-bd4edd8b7ff6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""387e1ddf-46e8-4a85-8550-21cf4da59b44"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92aee9ac-dc7a-473d-be55-c9ac3adadd20"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9a54590-4d62-417e-900e-9e07f39e8621"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TacticalCombat
        m_TacticalCombat = asset.FindActionMap("TacticalCombat", throwIfNotFound: true);
        m_TacticalCombat_EndTurn = m_TacticalCombat.FindAction("EndTurn", throwIfNotFound: true);
        m_TacticalCombat_UnitMove = m_TacticalCombat.FindAction("UnitMove", throwIfNotFound: true);
        m_TacticalCombat_PickPosition = m_TacticalCombat.FindAction("PickPosition", throwIfNotFound: true);
        m_TacticalCombat_MousePosition = m_TacticalCombat.FindAction("MousePosition", throwIfNotFound: true);
        m_TacticalCombat_Cancel = m_TacticalCombat.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TacticalCombat
    private readonly InputActionMap m_TacticalCombat;
    private ITacticalCombatActions m_TacticalCombatActionsCallbackInterface;
    private readonly InputAction m_TacticalCombat_EndTurn;
    private readonly InputAction m_TacticalCombat_UnitMove;
    private readonly InputAction m_TacticalCombat_PickPosition;
    private readonly InputAction m_TacticalCombat_MousePosition;
    private readonly InputAction m_TacticalCombat_Cancel;
    public struct TacticalCombatActions
    {
        private @PlayerInputActions m_Wrapper;
        public TacticalCombatActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @EndTurn => m_Wrapper.m_TacticalCombat_EndTurn;
        public InputAction @UnitMove => m_Wrapper.m_TacticalCombat_UnitMove;
        public InputAction @PickPosition => m_Wrapper.m_TacticalCombat_PickPosition;
        public InputAction @MousePosition => m_Wrapper.m_TacticalCombat_MousePosition;
        public InputAction @Cancel => m_Wrapper.m_TacticalCombat_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_TacticalCombat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TacticalCombatActions set) { return set.Get(); }
        public void SetCallbacks(ITacticalCombatActions instance)
        {
            if (m_Wrapper.m_TacticalCombatActionsCallbackInterface != null)
            {
                @EndTurn.started -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnEndTurn;
                @EndTurn.performed -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnEndTurn;
                @EndTurn.canceled -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnEndTurn;
                @UnitMove.started -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnUnitMove;
                @UnitMove.performed -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnUnitMove;
                @UnitMove.canceled -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnUnitMove;
                @PickPosition.started -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnPickPosition;
                @PickPosition.performed -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnPickPosition;
                @PickPosition.canceled -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnPickPosition;
                @MousePosition.started -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnMousePosition;
                @Cancel.started -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_TacticalCombatActionsCallbackInterface.OnCancel;
            }
            m_Wrapper.m_TacticalCombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EndTurn.started += instance.OnEndTurn;
                @EndTurn.performed += instance.OnEndTurn;
                @EndTurn.canceled += instance.OnEndTurn;
                @UnitMove.started += instance.OnUnitMove;
                @UnitMove.performed += instance.OnUnitMove;
                @UnitMove.canceled += instance.OnUnitMove;
                @PickPosition.started += instance.OnPickPosition;
                @PickPosition.performed += instance.OnPickPosition;
                @PickPosition.canceled += instance.OnPickPosition;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }
        }
    }
    public TacticalCombatActions @TacticalCombat => new TacticalCombatActions(this);
    public interface ITacticalCombatActions
    {
        void OnEndTurn(InputAction.CallbackContext context);
        void OnUnitMove(InputAction.CallbackContext context);
        void OnPickPosition(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
