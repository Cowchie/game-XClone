- Suppose that I have a working game, and I want to add to it a poison swamp level, this means that every unit in a certain area will need to lose say 8 health every turn. 

- This function is easy to write so I do so like this:


////////////////////////// START ///////////////////////////////
Dictionary<Indeces, Health> DoPoisonSwampDamage(
    Indeces[] indeces, 
    Dictionary<Indeces, Positions> positions, 
    Dictionary<Indeces, Health> healths
){
    Dictionary<Indeces, Health> new_healths = new Dictionary<Indeces, Health>();
    foreach (var i in indeces){
        if (InPoisonSwampAreaArea(positions[i])){
            new_healths[i] = DoDamage(
                                        healths[i], 
                                        8, 
                                        "Poison\Swamp\AOE\DOT"
                                    );
        }
        else{
            new_healths[i] = healths[i];
        }
    }

    return new_healths;
}
/////////////////////////// END ////////////////////////////////

- This is a very imperitive, entity component system approach.
- We can make it more funcitonal like so:


////////////////////////// START ///////////////////////////////
Dictionary<Indeces, Health> DoPoisonSwampDamage(
    Indeces[] indeces, 
    Dictionary<Indeces, Positions> positions, 
    Dictionary<Indeces, Health> healths
){
    return  from i in indeces
            select  InPoisonSwampAreaArea(positions[i]) ? 
                        DoDamage(
                            healths[i], 
                            8, 
                            "Poison\Swamp\AOE\DOT"
                        ) : 
                        healths[i];
}
/////////////////////////// END ////////////////////////////////


- Now I want to ask a question:
    - What if DoDamage NEEDS side effects?

- What do I mean?
    - For instance, DoDamge might make the unit unconsious, 
    - Or it might kill the unit.
        - If the unit dies, their family and friends might grieve.
        - Thus we will need to call another function to update the unit's family
        - This could affect the ability of their siblings in battle right away.
        - We DO NOT have access to the unit mood array.
        - Nor should we really need to do that right away.

- Here is what we might do to fix the above:

////////////////////////// START ///////////////////////////////
Dictionary<Indeces, Health> DoPoisonSwampDamage(
    Indeces[] indeces, 
    Dictionary<Indeces, Positions> positions, 
    Dictionary<Indeces, Health> healths, 
    out Message Message
){
    PoisonSwampArea = new Area(...);

    Message = new Message(DoPoisonSwampDamage); 
    return  from i in indeces
            select  InArea(
                        positions[i], 
                        PoisonSwampArea, 
                        "Poison\Swamp\AOE\DOT", 
                        out var m0
                    ) ? 
                        DoDamage(
                            healths[i], 
                            8, 
                            "Poison\Swamp\AOE\DOT", 
                            out var m1
                        ); Message.Add[m1] : 
                        healths[i]; Message.Add[m0];
}
/////////////////////////// END ////////////////////////////////

- What does this do which we did not have before?
    - We can safely collect all of the Message which we want to collect, and call them all later.
    - If we call them later, we can ensure that we will always have access to the data we are modifying.
    - In the constructor for Message, we input the function DoPoisonSwampDamage, this means we can keep a log of which functions are trying to call what, and print it out nicely in a debug scenario. (We can also shut that off to save memory in release mode.) 
    - The condition function can also spit out Message, this allows us to potentially make graphics highlighting to the player the position and size of the AOE. Whereas before that would be done in a separate function.

- Some slight modifications:
    - "Poison\Swamp\AOE\DOT" is included everywhere and should just be passed throught the message probably.

////////////////////////// START ///////////////////////////////
Dictionary<Indeces, Health> DoPoisonSwampDamage(
    Indeces[] indeces, 
    Dictionary<Indeces, Positions> positions, 
    Dictionary<Indeces, Health> healths, 
    ref Message Message
){
    PoisonSwampArea = new Area(...);

    Message =  AddCaller(
                    Message,
                    DoPoisonSwampDamage, 
                    "Poison\Swamp\AOE\DOT"
                );
    return  from i in indeces
            select  InArea(
                        positions[i], 
                        PoisonSwampArea, 
                        ref Message
                    ) ? 
                        DoDamage(
                            healths[i], 
                            8, 
                            ref Message
                        ) : 
                        healths[i];
}
/////////////////////////// END ////////////////////////////////

- This is just recieving a message, adding the node which says that we are in the poison swamp, and then doing the damage tick.
    - Now both the damage tick and the InArea condition checker know who called them.


- Final concern, why are we calling DoDamage?
    - Suppose that later down the line, we want to add a metal unit to the game which is immune to poison damage.
    - The DoDamage funciton would then have to know whether our unit is metal or not.
    - But the DoFireSwampDamage should not give a shit about that and so would not want to recieve data about metalness of the unit. 

- Last proposal for now is this:
    - Turn the DoDamage call itself into a message and call it later as well.

////////////////////////// START ///////////////////////////////
void DoPoisonSwampDamage(
    Indeces[] indeces, 
    Dictionary<Indeces, Positions> positions,  
    ref Message Message
){
    PoisonSwampArea = new Area(...);

    Message =  AddCaller(
                    Message,
                    Msg_DoPoisonSwampDamage, 
                    "Poison\Swamp\AOE\DOT"
                );

    Message.Add( 
        from i in indeces
        where   InArea(
                    positions[i], 
                    PoisonSwampArea, 
                    ref Message[Msg_DoPoisonSwampDamage]
                )
        from i in indeces 
        select  new MessageBuilder(Msg_DoDamage)
                    .set[Msg_DoDamage.damage](8)
                    .set[Msg_DoDamage.targetIndex](i);
    )
}
/////////////////////////// END ////////////////////////////////


- I still don't really like the below code.
- I feel like the above is pretty clean even if its not quite in a working state.


- To get where we really want to be, we will start by writing out the data we want to manipulate, and build the functionality around that.

- There are really multiple kinds of data:
    - The function which our message calls.
    - The parameters in the function call.
        - We only require that some of this information be set when the message is posted.
            - Includes type string.
            - Message which posted this request.
        - The rest of this can be set, or not.
    - The function which transform global state to function parameters and
    - The function which transforms function output to global state.
    - The List of Message.

- I Like the below, It is simple and quick.

////////////////////////// START ///////////////////////////////
interface ParamConversion<InputT, OptInputT, OutputT, StateT>{
    public InputT StateToInput(InputT input, OptInputT opt_input, StateT state);
    public StateT OutputToState(OutputT output, StateT state);
}

class Message<InputT, OptInputT, OutputT, StateT>{
    InputT      input;
    OptInputT   opt_input;

    Func<InputT, OptInputT, OutputT>                    func;
    ParamConversion<InputT, OptInputT, OutputT, StateT> convert; 

    public StateType Invoke(StateType state){
        return  convert.OutputToState(
                    func(
                        convert.StateToInput(input, opt_input, state)
                    ), 
                    state
                );
    }
}
/////////////////////////// END ////////////////////////////////
    
- I can update it by including a list of Message (callees) for which this is the caller, and a message which is its caller.

////////////////////////// START ///////////////////////////////
interface ParamConversion<InputT, OptInputT, OutputT, StateT>{
    InputT StateToInput(InputT input, OptInputT opt_input, StateT state);
    StateT OutputToState(OutputT output, StateT state);
}
interface Message<StateT>{
    StateT Invoke(StateT state);
    void SetCaller(Message<StateT> m);
    Message Add(Message<StateT> m);
    List<Message<StateT>> Split();
}


class GenericMessage<InputT, OptInputT, OutputT, StateT> : Message<StateT>{
    InputT      input;
    OptInputT   opt_input;

    Func<InputT, OptInputT, OutputT>                    func;
    ParamConversion<InputT, OptInputT, OutputT, StateT> convert; 

    StateT Invoke(StateT state){
        return convert.OutputToState(func(
            convert.StateToInput(input, opt_input, state)), state);
    }

    Message<StateT>         caller;
    List<Message<StateT>>   callees;

    void SetCaller(Message<StateT> m){
        caller = m;
    }

    Message<StateT> Add(Message<StateT> m){
        m.SetCaller(this);
        callees.Add(m);
    }

    List<Message<StateT>> Split(){
        return callees;
    }

}
/////////////////////////// END ////////////////////////////////



////////////////////////// START ///////////////////////////////
/////////////////////////// END ////////////////////////////////






































{
- What is required for this to work?
    - The place that calls Message MUST be able to discern exactly which data each message requires.
    - AND which data has already been given to it, for instance: damage and targetIndex.
    - When adding a message to a message list, the new message gets information from its parent list.
    - Need to be able to split Message so that we can throw old Message away.
    - Message have both Callers and Callees. A callee should know its caller, for instance:
        - The new MessageBuilder(Mes_DoDamage) when added to Message will be a callee with its caller being the Msg_DoPoisonSwampDamage

- The above code doesn't actually work. We need to actually figure out what the Message type will look like.

- The most basic functionality is this:
    - Takes in the game state, and returns new game state.
    - We might want to instead just have the updater take a reference to the state and modify it. 
////////////////////////// START ///////////////////////////////
interface UpdateState<StateT>{
    public StateT Update(StateT state);
}
/////////////////////////// END ////////////////////////////////

- Implementations of the above should take a generic function.
    - With a generic data type representing the generic inputs.
    - With a generic data type representing the generic outputs.
////////////////////////// START ///////////////////////////////
class Message<InputT, OutputT, StateT> : UpdateState<StateT>{
    InputT input;

    Func<InputT, OutputT>    func;
    ParamConversion<InputT, OutputT, StateT> convert; 

    public StateType Update(StateType state){
        return  convert.OutputToState(
                    func(
                        convert.StateToInput(input, state)
                    ), 
                    state
                );
    }
}
/////////////////////////// END ////////////////////////////////

- Where the ParamConversion interface is implemented in different ways for each set of inputs and outputs that a message can have.
////////////////////////// START ///////////////////////////////
interface ParamConversion<InputT, OutputT, StateT>{
    public InputT StateToInput( InputT input,   StateT state);
    public StateT OutputToState(OutputT output, StateT state);
}
/////////////////////////// END ////////////////////////////////


- The next most importatn functionality is the Message List
    - Function to Add callee.
    - Function to AddCaller.
    - Function to split list.
    - Move to Message with specified caller.
////////////////////////// START ///////////////////////////////
class Message<MessageT>{

    MessageT current_caller;
    Message next_Message;

    public Message Add(ref Message ms){
        m.current_caller = current_caller;
        next_Message is null ? next_Message = ms : next_Message.Add(m);
        return this;
    }

    public static Message AddCaller(ref Message prev, MessageT m, String str){
        var val = new Message<MessageT>(m, str);
        val.current_caller = m;
        return prev is null ? val : prev.Add(val);
    }

    MessageT my_message;
    String my_string;
    public Message(MessageT m, String str){
        my_message = m;
        my_string = str;
    }

    public List<Message> SplitNext(){
        var l = new List<Message>();
        var m = next_Message;
        while (!(m is null)){
            l.Add(m);
            m = m.next_Message;
        }
        return l;
    }

    public Message [ref messageT caller]{
        return my_caller == caller ? this : next_Message[caller];
    }

    public MessageT GetMessage(){
        return = my_message;
    }

    public override string ToString(){
        return  my_caller is null ? 
                    my_string : 
                    my_caller.ToString() + ">" + my_string;
    }
} 
/////////////////////////// END ////////////////////////////////

- I was thinking that I didn't like this, but actually, what happens if the StateT of changes at some point. I will likely need to do that and so the game is going to need to be pretty open to that.
}


////////////////////////// START ///////////////////////////////
/////////////////////////// END ////////////////////////////////
